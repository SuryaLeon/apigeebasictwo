/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompanyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CompanyParameters struct {

	// +kubebuilder:validation:Optional
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

// CompanySpec defines the desired state of Company
type CompanySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CompanyParameters `json:"forProvider"`
}

// CompanyStatus defines the observed state of Company.
type CompanyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CompanyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Company is the Schema for the Companys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,apigeebasictwojet}
type Company struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CompanySpec   `json:"spec"`
	Status            CompanyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompanyList contains a list of Companys
type CompanyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Company `json:"items"`
}

// Repository type metadata.
var (
	Company_Kind             = "Company"
	Company_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Company_Kind}.String()
	Company_KindAPIVersion   = Company_Kind + "." + CRDGroupVersion.String()
	Company_GroupVersionKind = CRDGroupVersion.WithKind(Company_Kind)
)

func init() {
	SchemeBuilder.Register(&Company{}, &CompanyList{})
}
