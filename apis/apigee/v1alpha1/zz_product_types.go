/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OperationObservation struct {
}

type OperationParameters struct {

	// +kubebuilder:validation:Required
	APISource *string `json:"apiSource" tf:"api_source,omitempty"`

	// +kubebuilder:validation:Optional
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Required
	Methods []*string `json:"methods" tf:"methods,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	Quota *float64 `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaInterval *float64 `json:"quotaInterval,omitempty" tf:"quota_interval,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaTimeUnit *string `json:"quotaTimeUnit,omitempty" tf:"quota_time_unit,omitempty"`
}

type ProductObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductParameters struct {

	// +kubebuilder:validation:Optional
	APIResources []*string `json:"apiResources,omitempty" tf:"api_resources,omitempty"`

	// +kubebuilder:validation:Optional
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Required
	AutoApprovalType *bool `json:"autoApprovalType" tf:"auto_approval_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// +kubebuilder:validation:Optional
	Operation []OperationParameters `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	Proxies []*string `json:"proxies,omitempty" tf:"proxies,omitempty"`

	// +kubebuilder:validation:Optional
	Quota *float64 `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaInterval *float64 `json:"quotaInterval,omitempty" tf:"quota_interval,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaTimeUnit *string `json:"quotaTimeUnit,omitempty" tf:"quota_time_unit,omitempty"`

	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

// ProductSpec defines the desired state of Product
type ProductSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProductParameters `json:"forProvider"`
}

// ProductStatus defines the observed state of Product.
type ProductStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProductObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Product is the Schema for the Products API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,apigeebasictwojet}
type Product struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProductSpec   `json:"spec"`
	Status            ProductStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProductList contains a list of Products
type ProductList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Product `json:"items"`
}

// Repository type metadata.
var (
	Product_Kind             = "Product"
	Product_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Product_Kind}.String()
	Product_KindAPIVersion   = Product_Kind + "." + CRDGroupVersion.String()
	Product_GroupVersionKind = CRDGroupVersion.WithKind(Product_Kind)
)

func init() {
	SchemeBuilder.Register(&Product{}, &ProductList{})
}
